// Collects the data for the crud work
{%- set top_element = data[0] %}
{%- for key, value in top_element.items() %}
type resource{{key|capitalize}} struct {
    client ProviderConfig
}
func (r *resource{{key|capitalize}}) Configure(_ context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	r.client = req.ProviderData.(ProviderConfig)
}
// Metadata implements resource.Resource.
func (r *resource{{key|capitalize}}) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_{{key|capitalize}}"
}
// Schema implements resource.Resource.
func (r *resource{{key|capitalize}}) Schema(_ context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"resource_name": schema.StringAttribute{
				Required:      true,
				PlanModifiers: []planmodifier.String{stringplanmodifier.RequiresReplace()},
			},
			{%- for attr in value.attributes %}
			"{{attr.attr_name}}": schema.{{attr.attr_type|capitalize}}NestedAttribute{
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: {{attr.attr_name|capitalize}}Model{}.Attributes(),
				},
			},
			{%- endfor %}
		},
	}
}
{%- endfor %}
