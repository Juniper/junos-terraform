{%- set ele_for_struct = [] %}
{%- set all_ele_list = [] %}
{%- macro string_macro(ele) -%}
		{{ele.name|capitalize|replace("-", "_")}}         *string  `xml:"{{ele.name|replace("_","-")}},omitempty"`
{%- endmacro -%}
{%- macro bool_macro(ele) -%}
		{{ele.name|capitalize|replace("-", "_")}}         *bool  `xml:"{{ele.name|replace("_","-")}},omitempty"`
{%- endmacro -%}

{%- macro int32_macro(ele) -%}
		{{ele.name|capitalize}}         *int32  `xml:"{{ele.name|replace("_","-")}},omitempty"`
{%- endmacro -%}

{%- macro int64_macro(ele) -%}
	{{ele.name|capitalize}}         *int64  `xml:"{{ele.name|replace("_","-")}},omitempty"`
{%- endmacro -%}

{%- macro list_macro(ele) -%}
		{{ele.name|capitalize}} struct {
		{%- if ele.kids %}
			{%- for kid in ele['kids'] %}
			{%- if (kid['leaf-type'] == 'string') or (kid['base-type'] == 'string') %}
			 	{{string_macro(kid)}}
			{%- endif %}
			{%- if kid['type'] == 'container' %}
				{{container_macro(kid)}}
			{%- endif %}
			{%- if kid['type'] == 'list' %}
				{{list_macro(kid)}}
			{%- endif %}
			{%- endfor %}
		{%- endif %}
		}
{%- endmacro -%}

{%- macro container_macro(ele) -%}
		{{ele.name|capitalize}} struct {
		{%- if ele.kids %}
			{%- for kid in ele['kids'] %}
				{%- if (kid['leaf-type'] == 'string') or (kid['base-type'] == 'string') %}
					{{ string_macro(kid) }}
				{%- endif %}
				{%- if kid['leaf-type'] == 'union' %}
					{{ int64_macro(kid) }}
				{%- endif %} 
				{%- if kid['type'] == 'list' %}
					{{ list_macro(kid) }}
				{%- endif %}
				{%- if kid['type'] == 'container' %}
					{{ container_macro(kid) }}
				{%- endif %}
			{%- endfor %}
		{%- endif %}
		}
{%- endmacro -%}

{%- macro create_struct(kid, arg2) %}
{%- if kid[0] is defined  %}
{%- if kid|length > 1%}
{%- if kid[0].name == kid[1].name %}
{%- if kid.pop(1)%} {%- endif %}
{%- endif %}
{%- endif %}
{%- set arg2 = []%}
{%- for grandkid in kid %}
type {{grandkid.name|capitalize}}Model struct {
	{%- for ele in grandkid['kids'] %}
	{%- if ele['leaf-type'] == 'string' %}
	{{ele.name|capitalize|replace("-", "_")}}	types.{{ele['leaf-type']|capitalize}} `tfsdk:"{{ele.name}}"`
	{%- endif %}
	{%- if ele['base-type'] == 'string' %}
	{{ele.name|capitalize}}	types.{{ele['base-type']|capitalize}} `tfsdk:"{{ele.name}}"`
	{%- endif %}
	{%- if ele['leaf-type'] == 'empty'%}
	{{ele.name|capitalize|replace("-", "_")}} types.Bool `tfsdk:"{{ele.name}}"`
	{%- endif %}
	{%- if ele['leaf-type'] == 'union' %}
	{{ele.name|capitalize}}	types.Int64 `tfsdk:"{{ele.name}}"`
	{%- endif %}
	{%- if ele['type'] == 'container' %}
	{{ele.name|capitalize}}	types.List `tfsdk:"{{ele.name}}"`
	{%- if arg2.append(ele) %} {% endif %}
	{%- endif %}
	{%- if ele['type'] == 'list' %}
	{{ele.name|capitalize}}	types.List `tfsdk:"{{ele.name}}"`
	{%- if arg2.append(ele) %} {% endif %}
	{%- endif %}
	{%- endfor %}
}
func (o {{grandkid.name|capitalize}}Model) AttrTypes() map[string]attr.Type {
	return map[string]attr.Type{
	{%- for ele in grandkid['kids'] %}
	{%- if ele['leaf-type'] == 'string' %}
	"{{ele.name}}": 	types.{{ele['leaf-type']|capitalize}}Type,
	{%- endif %}
	{%- if ele['base-type'] == 'string' %}
	"{{ele.name}}": 	types.{{ele['base-type']|capitalize}}Type,
	{%- endif %}
	{%- if ele['leaf-type'] == 'union' %}
	"{{ele.name}}": 	types.Int64Type,
	{%- endif %}
	{%- if ele['type'] == 'list' or ele['type'] == 'container'%}
	"{{ele.name}}": 	types.ListType{ElemType: types.ObjectType{AttrTypes: {{ele.name|capitalize}}Model{}.AttrTypes()}},
	{%- endif %}
	{%- endfor %}
	}
}
func (o {{grandkid.name|capitalize}}Model) Attributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
	{%- for ele in grandkid['kids'] %}
	{%- if ele['leaf-type'] == 'string'%}
	"{{ele.name}}": schema.{{ele['leaf-type']|capitalize}}Attribute{
		Optional: true,
		MarkdownDescription: "xpath is `config.Groups.{{kid[0].name|capitalize}}.{{ele.name|capitalize}}`",
	},
	{%- endif %}
	{%- if ele['base-type'] == 'string'%}
	"{{ele.name}}": schema.{{ele['base-type']|capitalize}}Attribute{
		Optional: true,
		MarkdownDescription: "xpath is `config.Groups.{{kid[0].name|capitalize}}.{{ele.name|capitalize}}`",
	},
	{%- endif %}
	{%- if ele['leaf-type'] == 'union' %}
	"{{ele.name}}": schema.Int64Attribute{
		Optional: true,
		MarkdownDescription: "xpath is `config.Groups.{{kid[0].name|capitalize}}.{{ele.name|capitalize}}`",
	},
	{%- endif %}
	{%- if ele['type'] == 'list' or ele['type'] == 'container' %}
	"{{ele.name}}": schema.ListNestedAttribute{
		Optional: true,
		NestedObject: schema.NestedAttributeObject{
			Attributes: {{ele.name|capitalize}}Model{}.Attributes(),
		},
	},
	{%- endif %}
	{%- endfor %}
	}
}
{%- endfor %}
{%- if arg2|length > 0 %}
{{create_struct(arg2, arg3)}}
{%- endif %}
{%- endif %}
{%- endmacro %}

{%- macro get_parent_list(ele) -%}
{%- set result_list = [] %}
{%- for item in ele['path'].split("/")[1:]%}
{{- result_list.append(item|capitalize|replace("-", "_")) or ""}}
{%- endfor %}
{{-result_list|join(".")-}}
{%- endmacro -%}

{%- macro create_resource_list_type(parent_var, ele, first_element) %}
	{%- if ele.name not in all_ele_list%}
	{%- set kid_var = 'var_'+ele.name %}
	var {{kid_var}} []{{ele.name|capitalize}}Model
	{%- if first_element == 1%}
	resp.Diagnostics.Append({{parent_var}}[0].{{ele.name|capitalize}}.ElementsAs(ctx, &{{kid_var}}, false)...)
	{%- else %}
	resp.Diagnostics.Append({{parent_var}}.{{ele.name|capitalize}}.ElementsAs(ctx, &{{kid_var}}, false)...)
	{%- endif %}
	if resp.Diagnostics.HasError() {
		return
	}
	{%- for kid in ele['kids'] %}
	{%- if kid['leaf-type'] == 'string' or kid['base-type'] == 'string'%}
	config.Groups.{{get_parent_list(kid)}}.{{kid.name|capitalize|replace("-", "_")}} = {{kid_var}}[0].{{kid.name|capitalize|replace("-", "_")}}.ValueStringPointer()
	{%- endif %}
	{%- if kid['type'] == 'container' or kid['type'] == 'list' %}
	{{create_resource_list_type(kid_var, kid, 1)}}
	{%- endif %}
	{%- endfor %}
	{%- if all_ele_list.append(ele.name) %}{%- endif %}
	{%- endif %}
{%- endmacro %}

{%- macro read_resource_list(ele) %}
	var {{ele.name}}s []{{ele.name|capitalize}}Model
	xml{{ele.name}}s = config.Groups.{{ele.name|capitalize}}[0]
	{{ele.name}}s = append({{ele.name}}s, {{ele.name}}) 
	{%- if ele['kids'] %}
	{%- for grandkid in ele['kids']%}
	{%- if grandkid['type'] == 'container' or grandkid['type'] == 'list'%}
	{{- read_resource_list(grandkid)}}
	{%- endif %}
	{%- if grandkid['base-type'] == 'string'%}
	newstate.{{grandkid.name}} = types.StringPointerValue(config.Groups.{{ele.name|capitalize}}.{{grandkid.name|capitalize}})	
	{%- endif %}
	{%- endfor %}
	{%- endif %}
{%- endmacro %}

package main

import (
	"context"
	"encoding/xml"
	"strconv"
	"strings"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// Junos XML Hierarchy
{%- set parent = data['root']['kids'][0]['kids'][0] %}
type xml{{parent.name|capitalize}} struct {
	XMLName xml.Name `xml:"configuration"`
	Groups  struct {
		XMLName   xml.Name `xml:"groups"`
		Name      string   `xml:"name"`
		{%- for kid in parent['kids'] %}
		{{kid.name|capitalize}} struct {
		XMLName      xml.Name `xml:"{{kid.name}}"`
		{%- set grandkid = kid['kids'] %}
		{%- for ele in grandkid %}
			{%- if ele['leaf-type'] == 'string' %}
				{{ string_macro(ele) }}
			{%- endif %}
			{%- if ele['leaf-type'] == 'empty' %}
				{{ bool_macro(ele) }}
			{%- endif %}
			{%- if ele['leaf-type'] == 'union' %}
				{{ int64_macro(ele) }}
			{%- endif %} 
			{%- if ele['type'] == 'list' %}
				{{ list_macro(ele) }}
			{%- endif %}
			{%- if ele['type'] == 'container' %}
				{{ container_macro(ele) }}
			{%- endif %}
		{%- endfor %}
		} `xml:"{{parent.name}}>{{kid.name}}"`
		{%- endfor %}
	} `xml:"groups"`
}

// Collecting objects from the .tf file
{%- for kid in parent['kids'] %}
type {{kid.name|capitalize}}sModel struct {
	ResourceName	types.String `tfsdk:"resource_name"`
	{%- for grandkid in kid['kids'] %}
	{%- if grandkid['leaf-type'] == 'string' %}
	{{grandkid.name|capitalize}}	types.{{grandkid['leaf-type']|capitalize}} `tfsdk:"{{grandkid.name}}"`
	{%- endif %}
	{%- if grandkid['leaf-type'] == 'empty'%}
	{{grandkid.name|capitalize|replace("-", "_")}} types.Bool `tfsdk:"{{grandkid.name}}"`
	{%- endif %}
	{%- if grandkid['leaf-type'] == 'union' %}
	{{grandkid.name|capitalize}}	types.Int64 `tfsdk:"{{grandkid.name}}"`
	{%- endif %}
	{%- if grandkid['type'] == 'list' %}
	{{grandkid.name|capitalize}}	types.List `tfsdk:"{{grandkid.name}}"`
	{% if ele_for_struct.append(grandkid) %} {% endif %}
	{%- endif %}
	{%- endfor %}
}
func (o {{kid.name|capitalize}}sModel) AttrTypes() map[string]attr.Type {
	return map[string]attr.Type{
	{%- for grandkid in kid['kids'] %}
		{%- if grandkid['leaf-type'] == 'string' %}
		"{{grandkid.name}}": 	types.{{grandkid['leaf-type']|capitalize}}Type,
		{%- endif %}
		{%- if grandkid['leaf-type'] == 'union' %}
		"{{grandkid.name}}": 	types.Int64Type,
		{%- endif %}
		{%- if grandkid['type'] == 'list' or grandkid['type'] == 'container'%}
		"{{grandkid.name}}": 	types.ListType{ElemType: types.ObjectType{AttrTypes: {{grandkid.name|capitalize}}Model{}.AttrTypes()}},
		{%- endif %}
	{%- endfor %}
	}
}
func (o {{kid.name|capitalize}}sModel) Attributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
	{%- for grandkid in kid['kids'] %}
		{%- if grandkid['leaf-type'] == 'string' %}
		"{{grandkid.name}}": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: "xpth is `config.Groups.{{kid.name|capitalize}}.{{grandkid.name|capitalize}}",
		},
		{%- endif %}
		{%- if grandkid['leaf-type'] == 'union' %}
		"{{grandkid.name}}": schema.Int64Attribute{
			Optional: true,
			MarkdownDescription: "xpath is `config.Groups.{{kid.name|capitalize}}.{{grandkid.name|capitalize}}",
		},
		{%- endif %}
		{%- if grandkid['type'] == 'list' %}
		"{{grandkid.name}}": schema.ListNestedAttribute{
			Optional: true,
			NestedObject: schema.NestedAttributeObject{
				Attributes: {{grandkid.name|capitalize}}Model{}.Attributes(),
			},
		},
		{%- endif %}
		{%- if grandkid['type'] == 'container' %}
		"{{grandkid.name}}": schema.ListNestedAttribute{
			Optional: true,
			NestedObject: schema.NestedAttributeObject{
				Attributes: {{grandkid.name|capitalize}}Model{}.Attributes(),
			},
		},
		{%- endif %}
	{%- endfor %}
	}
}
{%- endfor %}
{%- if ele_for_struct|length > 0 %}
{{create_struct(ele_for_struct, arg2)}}
{%- set ele_for_struct = [] %}
{%- endif %}

// Collects the data for the crud work
type resource{{parent.name|capitalize}} struct {
	client ProviderConfig
}

func (r *resource{{parent.name|capitalize}}) Configure(_ context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	r.client = req.ProviderData.(ProviderConfig)
}
// Metadata implements resource.Resource.
func (r *resource{{parent.name|capitalize}}) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_{{parent.name|capitalize}}"
}
// Schema implements resource.Resource.
func (r *resource{{parent.name|capitalize}}) Schema(_ context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"resource_name": schema.StringAttribute{
				Required:      true,
				PlanModifiers: []planmodifier.String{stringplanmodifier.RequiresReplace()},
			},
			{%- for kid in parent['kids'] %}
			{%- if kid['leaf-type'] == 'string' %}
			"{{kid.name}}": schema.{{kid['leaf-type']|capitalize}}Attribute{
				Required:            true,
				MarkdownDescription: "xpath is: `config.Groups.{{kid.name|capitalize}}`",
			},
			{%- endif %}
			{%- if kid['leaf-type'] == 'union' %}
			"{{kid.name}}": schema.Int64Attribute{
				Required:            true,
				MarkdownDescription: "xpath is: `config.Groups.{{kid.name|capitalize}}`",
			},
			{%- endif %}
			{%- if kid['type'] == 'list' %}
			"{{kid.name}}": schema.ListNestedAttribute{
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: {{kid.name|capitalize}}sModel{}.Attributes(),
				},
			},
			{%- endif %}
			{%- endfor %}
		},
	}
}
// Create implements resource.Resource.
func (r *resource{{parent.name|capitalize}}) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	{%- set parent_var = 'plan'%}
	// Get the {{parent.name|capitalize}} Model data and set
	var {{parent_var}} {{parent.name|capitalize}}Model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	// Check for errors
	if resp.Diagnostics.HasError() {
		return
	}

	var config xml{{parent.name|capitalize}}
	config.Groups.Name = plan.ResourceName.ValueString()
	{%- for kid in parent['kids']%}
	{%- for grandkid in kid['kids']%}
	{%- if grandkid['leaf-type'] == 'string' %}
	config.Groups.{{kid.name|capitalize}}.{{grandkid.name|capitalize}} = plan.Name.ValueStringPointer()
	{%- endif %}
	{%- if grandkid['leaf-type'] == 'union' %}
	config.Groups.{{kid.name|capitalize}}.{{grandkid.name|capitalize}} = plan.{{grandkid.name|capitalize}}.ValueInt64Pointer()
	{%- endif %}
	{%- if  grandkid['leaf-type'] ==  'empty' %}
	config.Groups.{{kid.name|capitalize}}.{{grandkid.name|capitalize|replace("-", "_")}} = plan.{{grandkid.name|capitalize
	|replace("-", "_")}}.ValueBoolPointer()
	{%- endif %}
	{%- if grandkid['type'] == 'list' %}
	{{create_resource_list_type(parent_var, grandkid, 0)}}
	{%- endif %}
	{%- endfor %}
	{%- endfor %}
	
	err := r.client.SendTransaction("", config, false)
		if err != nil {
			resp.Diagnostics.AddError("Failed while Sending", err.Error())
			return
		}
		resp.Diagnostics.Append(resp.State.Set(ctx, &plan)...)
}

// Read implements resource.Resource.
func (r *resource{{parent.name|capitalize}}) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	
	// Get the data and set
	var state {{parent.name|capitalize}}Model
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	// Check for errors
	if resp.Diagnostics.HasError() {
		return
	}

	// Marshall group and check
	var config xml{{parent.name|capitalize}}
	id := config.Groups.Name
	err := r.client.MarshalGroup(id, config)
	if err != nil {
		resp.Diagnostics.AddError("Failed while Reading", err.Error())
		return
	}
	var newstate {{parent.name|capitalize}}Model
	newstate.ResourceName = types.StringValue(config.Groups.Name)
	{%- for kid in parent['kids'] %}
	{%- for grandkid in kid['kids'] %}
	{%- if grandkid['leaf-type'] == 'string' or grandkid['leaf-type'] == 'empty'%}
	newstate.{{grandkid.name|capitalize}} = types.StringPointerValue(config.Groups.{{kid.name|capitalize}}.{{grandkid.name|capitalize}})
	{%- endif %}
	{%- if grandkid['leaf-type'] == 'union'%}
	newstate.{{grandkid.name|capitalize}} = types.Int64PointerValue(config.Groups.{{kid.name|capitalize}}.{{grandkid.name|capitalize}})
	{%- endif %}
	{%- if grandkid['type'] == 'list'%}
	{{-read_resource_list(grandkid)}}
	{{grandkid.name}}_list, diags := types.ListValueFrom(ctx, types.ObjectType{AttrTypes: {{grandkid.name}}sModel{}.AttrTypes()}, {{grandkid.name}}s)
	if resp.Diagnostics.HasError() {
		return
	}
	newstate.{{grandkid.name|capitalize}}s = {{grandkid.name}}s_list
	
	{%- endif %}
	{%- endfor %}
	{%- endfor %}

	{%- for kid in parent['kids'] %}
	{%- for grandkid in kid['kids'] %}
	if err := resp.State.Set(ctx, config.Groups.{{parent.name|capitalize}}.{{kid.name|capitalize}}.{{grandkid.name|capitalize|replace("-","_")}}); err != nil {
		return
	}
	{%- endfor %}
	{%- endfor %}
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update implements resource.Resource.
func (r *resource{{parent.name|capitalize}}) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	// Get the data and set
	{%- set parent_var = 'plan'%}
	var {{parent_var}} {{parent.name|capitalize}}Model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	// Check for errors
	if resp.Diagnostics.HasError() {
		return
	}
	var config xml{{parent.name|capitalize}}
	config.Groups.Name = plan.ResourceName.ValueString()
	{%- for kid in parent['kids']%}
	{%- for grandkid in kid['kids']%}
	{%- if grandkid['leaf-type'] == 'string' %}
	config.Groups.{{kid.name|capitalize}}.{{grandkid.name|capitalize}} = plan.Name.ValueStringPointer()
	{%- endif %}
	{%- if grandkid['leaf-type'] == 'union' %}
	config.Groups.{{kid.name|capitalize}}.{{grandkid.name|capitalize}} = plan.{{grandkid.name|capitalize}}.ValueInt64Pointer()
	{%- endif %}
	{%- if  grandkid['leaf-type'] ==  'empty' %}
	config.Groups.{{kid.name|capitalize}}.{{grandkid.name|capitalize|replace("-","_")}} = ""
	{%- endif %}
	{%- if grandkid['type'] == 'list' %}
	{{create_resource_list_type(parent_var, grandkid, 0)}}
	{%- endif %}
	{%- endfor %}
	{%- endfor %}
	
	err := r.client.SendTransaction("", config, false)
		if err != nil {
			resp.Diagnostics.AddError("Failed while Sending", err.Error())
			return
		}
		resp.Diagnostics.Append(resp.State.Set(ctx, &plan)...)
}

// Delete implements resource.Resource.
func (r *resource{{parent.name|capitalize}}) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state {{parent.name|capitalize}}Model
	d := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(d...)
	if resp.Diagnostics.HasError() {
		return
	}

	_, err := r.client.DeleteConfig(state.ResourceName.ValueString(), false)
	if err != nil {
		if strings.Contains(err.Error(), "ound") {
			return
		}
		resp.Diagnostics.AddError("Failed while deleting dile", err.Error())
		return
	}
}