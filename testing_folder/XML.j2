package main

import (
	"context"
	"encoding/xml"
	"strconv"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// Junos XML Hierarchy

type xml{{parent|capitalize}} struct {
	XMLName xml.Name `xml:"configuration"`
	Groups  struct {
		XMLName   xml.Name `xml:"groups"`
		Name      string   `xml:"name"`
		{%- for key in data.keys() %}
		{{key|capitalize}} struct {
		XMLName      xml.Name `xml:"interface"`
		{%- endfor %}
		{%- for value in data.values() %}
		{%- for attr in value.attributes %}
			{%- if attr.attr_type == 'bool' %}
			{{attr.attr_name|capitalize}}         *string  `xml:"{{attr.attr_name|replace("_","-")}},omitempty"`
			{%- else %}
			{{attr.attr_name|capitalize}}         *{{attr.attr_type}}  `xml:"{{attr.attr_name|replace("_","-")}},omitempty"`
			{%- endif %}
		{%- endfor %}
		{%- endfor %}
		{%- for key in data.keys() %}
		} `xml:"{{parent}}>{{key}}"`
		{%- endfor %}
	} `xml:"groups"`
}


// Collecting objects from the .tf file
type {{parent|capitalize}}Model struct {
	ResourceName types.String `tfsdk:"resource_name"`
	{%- for value in data.values() %}
	{%- for attr in value.attributes %}
	{{attr.attr_name|capitalize}}         types.{{attr.attr_type|capitalize}} `tfsdk:"{{attr.attr_name}}"`
	{%- endfor %}
	{%- endfor %}
}

func (o {{parent|capitalize}}Model) AttrTypes() map[string]attr.Type {
	return map[string]attr.Type{
		{%- for value in data.values() %}
		{%- for attr in value.attributes %}
		"{{attr.attr_name}}":         types.{{attr.attr_type|capitalize}}Type,
		{%- endfor %}
		{%- endfor %}
	}
}
func (o {{parent|capitalize}}Model) Attributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		{%- for key, value in data.items() %}
		{%- for attr in value.attributes %}
		"{{attr.attr_name}}": schema.{{attr.attr_type|capitalize}}Attribute{
			Required:            true,
			MarkdownDescription: "xpath is `config.Groups.{{key|capitalize}}.{{attr.attr_name|capitalize}}",
		},
		{%- endfor %}
		{%- endfor %}
	}
}

// Collects the data for the crud work
type resource{{parent|capitalize}} struct {
	client ProviderConfig
}

func (r *resource{{parent|capitalize}}) Configure(_ context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	r.client = req.ProviderData.(ProviderConfig)
}

// Metadata implements resource.Resource.
func (r *resource{{parent|capitalize}}) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_{{parent|capitalize}}"
}

// Schema implements resource.Resource.
func (r *resource{{parent|capitalize}}) Schema(_ context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"resource_name": schema.StringAttribute{
				Required:      true,
				PlanModifiers: []planmodifier.String{stringplanmodifier.RequiresReplace()},
			},
			{%- for key, value in data.items() %}
			{%- for attr in value.attributes %}
			"{{attr.attr_name}}": schema.{{attr.attr_type|capitalize}}Attribute{
				Required:            true,
				{%- if attr.attr_name == 'name' %}
				MarkdownDescription: "xpath is: `config.Groups.{{key|capitalize}}`",
				{%- else %}
				MarkdownDescription: "xpath is: `config.Groups.{{attr.attr_name|capitalize}}`",
				{%- endif %}
			},
			{%- endfor %}
			{%- endfor %}
		},
	}
}

// Create implements resource.Resource.
func (r *resource{{parent|capitalize}}) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	// Get the  Model data and set
	var plan {{parent|capitalize}}Model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	// Check for errors
	if resp.Diagnostics.HasError() {
		return
	}

	var config xml{{parent|capitalize}}
	config.Groups.Name = plan.ResourceName.ValueString()
	{%- for key, value in data.items() %}
	{%- for attr in value.attributes %}
	{%- if attr.attr_type == 'bool' %}
	if plan.{{attr.attr_name|capitalize}}.Value{{attr.attr_type|capitalize}}() {
		empty := ""
		config.Groups.{{key|capitalize}}.{{attr.attr_name|capitalize}} = &empty
	}
	{%- else %}
	config.Groups.{{key|capitalize}}.{{attr.attr_name|capitalize}} = plan.{{attr.attr_name|capitalize}}.Value{{attr.attr_type|capitalize}}Pointer()
	{%- endif %}
	{%- endfor %}
	{%- endfor %}
	err := r.client.SendTransaction("", config, false)
	if err != nil {
		resp.Diagnostics.AddError("Failed while Sending", err.Error())
		return
	}
	resp.Diagnostics.Append(resp.State.Set(ctx, &plan)...)
}

// Read implements resource.Resource.
func (r *resource{{parent|capitalize}}) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	// Get the data and set
	var state {{parent|capitalize}}Model
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	// Check for errors
	if resp.Diagnostics.HasError() {
		return
	}
	// Marshall group and check
	var config xml{{parent|capitalize}}
	err := r.client.MarshalGroup(state.ResourceName.ValueString(), &config)
	if err != nil {
		resp.Diagnostics.AddError("Failed while Reading", err.Error())
		return
	}
	{%- for key, value in data.items() %}
	{%- for attr in value.attributes %}
	{%- if attr.attr_type == 'bool' %}
	var {{attr.attr_name}} *bool
	if config.Groups.{{key|capitalize}}.{{attr.attr_name|capitalize}} != nil {
		b, err := strconv.ParseBool(*config.Groups.{{key|capitalize}}.{{attr.attr_name|capitalize}})
		if err == nil {
			{{attr.attr_name}} = &b
		}
	}
	state.{{attr.attr_name|capitalize}} = types.{{attr.attr_type|capitalize}}PointerValue({{attr.attr_name}})
	{%- else %}
	state.{{attr.attr_name|capitalize}} = types.{{attr.attr_type|capitalize}}PointerValue(config.Groups.{{key|capitalize}}.{{attr.attr_name|capitalize}})
	{%- endif %}
	{%- endfor %}
	{%- endfor %}
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update implements resource.Resource.
func (r *resource{{parent|capitalize}}) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

}

// Delete implements resource.Resource.
func (r *resource{{parent|capitalize}}) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state {{parent|capitalize}}Model
	d := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(d...)
	if resp.Diagnostics.HasError() {
		return
	}

	_, err := r.client.DeleteConfig(state.ResourceName.ValueString(), false)
	if err != nil {
		if strings.Contains(err.Error(), "ound") {
			return
		}
		resp.Diagnostics.AddError("Failed while deleting dile", err.Error())
		return
	}
}
